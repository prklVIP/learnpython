# -*- python -*-
from __future__ import print_function

import os
import sys
from os.path import dirname, realpath, join, isdir
from IPython.core import magic_arguments
from IPython.utils.warn import warn, error
from IPython.core.magic import Magics, magics_class, line_magic
from IPython.utils.path import get_ipython_dir

@magics_class
class AgingMagics(Magics):

    @line_magic
    def servicelife(self, line=''):
        """servicelife line magic"""
        PY_D = os.environ['PY_D']
        if not isdir(PY_D):
            print('{0!r} is not a directory'.format(PY_D))
            return
        if PY_D not in sys.path:
            sys.path.insert(0, PY_D)

        # Key imports
        user_ns = {}
        s = ('import os\n'
             'import re\n'
             'import sys\n'
             'import logging\n'
             'import random\n'
             'import numpy\n'
             'np = numpy\n'
             'from numpy import *\n'
             'from numpy.linalg import inv, det\n'
             'from bokeh.plotting import *\n'
             'from bokeh.io import output_notebook\n'
             'from data import *\n'
             'from plotting import *\n'
             'from scipy.stats import linregress\n'
             'output_notebook()\n'
            )

        exec(s, user_ns)

        # warn about clobbered names
        ignored = set(['__builtins__'])
        both = set(user_ns).intersection(self.shell.user_ns).difference(ignored)
        clobbered = [name for name in both
                     if self.shell.user_ns[name] is not user_ns[name] ]

        # warn about clobbered names
        print ('Populating the interactive namespace '
               'from aging, numpy, and bokeh')
        if clobbered:
            warn('import has clobbered these variables: %s'  % clobbered)

        self.shell.user_ns.update(user_ns)

# In order to actually use these magics, you must register them with a
# running IPython.  This code must be placed in a file that is loaded once
# IPython is up and running:
ip = get_ipython()

# You can register the class itself without instantiating it.  IPython will
# call the default constructor on it.
ip.register_magics(AgingMagics)
